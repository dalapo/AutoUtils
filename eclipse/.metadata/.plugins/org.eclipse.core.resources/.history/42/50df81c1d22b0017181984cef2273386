package dalapo.autoutils.tileentity;

import dalapo.autoutils.helper.TileEntityHelper;
import net.minecraft.block.Block;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;
import net.minecraftforge.common.util.ForgeDirection;

public class TileEntityStackMover extends TileEntityDirectional {
	ItemStack[] filter;
	private boolean isPowered = false;
	public static final String id = "StackMover";
	public TileEntityStackMover(ForgeDirection d)
	{
		super(d);
		Logger.info("Created TileEntityStackMover");
		filter = new ItemStack[9];
	}
	
	public TileEntityStackMover(int d)
	{
		super(d);
		filter = new ItemStack[9];
	}
	
	public void performTick() // Called when a block adjacent to the TE updates.
	{
		if (worldObj.isBlockIndirectlyGettingPowered(xCoord, yCoord, zCoord))
		{
			if (!isPowered)
			{
				transferStack();
				isPowered = true;
			}
		}
		else isPowered = false;
	}
	
	private boolean shouldFilter()
	{
		for (ItemStack is : filter)
		{
			if (is != null) return true;
		}
		return false;
	}
	
	private boolean checkFilter(ItemStack i)
	{
		if (!shouldFilter()) return true;
		for (ItemStack is : filter)
		{
			if (is.getItem().equals(i.getItem())) return true;
		}
		return false;
	}
	
	private int getSlot(IInventory te)
	{
		if (te == null) return -1;
		for (int i=0; i<te.getSizeInventory(); i++)
		{
			if (checkFilter(te.getStackInSlot(i)))
			{
				return i;
			}
		}
		return -1;
	}
	
	public void transferStack()
	{
		TileEntity pull = worldObj.getTileEntity(xCoord + front.offsetX, yCoord + front.offsetY, zCoord + front.offsetZ);
		if (!(pull instanceof IInventory)) return; // Nowhere to pull from
		int slot = getSlot((IInventory)pull);
		if (slot == -1) return; // Nothing to pull
		if (!worldObj.getBlock(xCoord - front.offsetX, yCoord - front.offsetY, zCoord - front.offsetZ).isNormalCube())
		{
			ItemStack is = ((IInventory)pull).getStackInSlot(slot);
			((IInventory)pull).setInventorySlotContents(slot, null);
			EntityItem drop = new EntityItem(worldObj, xCoord - front.offsetX, yCoord - front.offsetY, zCoord - front.offsetZ, is);
			worldObj.spawnEntityInWorld(drop);
		}
		TileEntity push = worldObj.getTileEntity(xCoord - front.offsetX, yCoord - front.offsetY, zCoord - front.offsetZ);
		if (push != null && push instanceof IInventory)
		{
			ItemStack is = ((IInventory)pull).getStackInSlot(slot);
			ItemStack remaining = TileEntityHelper.tryInsertItem((IInventory)push, is);
			((IInventory)pull).setInventorySlotContents(slot, remaining);
		}
	}
}